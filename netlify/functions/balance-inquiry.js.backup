const { Pool } = require('pg');

const LINE_CHANNEL_ACCESS_TOKEN = process.env.LINE_CHANNEL_ACCESS_TOKEN;

exports.handler = async (event, context) => {
    // Handle CORS
    if (event.httpMethod === 'OPTIONS') {
        return {
            statusCode: 200,
            headers: {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Headers': 'Content-Type, Authorization',
                'Access-Control-Allow-Methods': 'POST, GET, OPTIONS'
            },
            body: ''
        };
    }

    if (event.httpMethod !== 'POST') {
        return {
            statusCode: 405,
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ error: 'Method not allowed' })
        };
    }

    try {
        const { lineUserId, requestType = 'balance' } = JSON.parse(event.body);

        if (!lineUserId) {
            return {
                statusCode: 400,
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    success: false,
                    error: 'Missing lineUserId'
                })
            };
        }

        // Database connection
        const pool = new Pool({
            connectionString: process.env.NETLIFY_DATABASE_URL,
            ssl: { rejectUnauthorized: false }
        });

        const client = await pool.connect();

        try {
            console.log(`Processing balance inquiry for LINE user: ${lineUserId}`);

            // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ LINE account ‡∏ñ‡∏π‡∏Å‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            const userResult = await client.query(`
                SELECT 
                    la.id,
                    la.line_user_id,
                    la.prima789_user_id,
                    la.username,
                    la.display_name,
                    la.balance,
                    la.points,
                    la.tier,
                    la.last_sync_at,
                    la.updated_at,
                    la.created_at
                FROM line_accounts la 
                WHERE la.line_user_id = $1 
                AND la.status = 'active'
            `, [lineUserId]);

            if (userResult.rows.length === 0) {
                // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
                await sendNotLinkedMessage(lineUserId);
                
                return {
                    statusCode: 404,
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        success: false,
                        error: 'Account not linked',
                        message: 'LINE account is not linked to Prima789 account'
                    })
                };
            }

            // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å const ‡πÄ‡∏õ‡πá‡∏ô let ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ assign ‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ
            let userData = userResult.rows[0];

            // 2. ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£ refresh ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô 5 ‡∏ô‡∏≤‡∏ó‡∏µ ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
            const now = new Date();
            const lastSync = new Date(userData.last_sync_at || 0);
            const timeDiff = now - lastSync;
            const shouldRefresh = requestType === 'refresh' || timeDiff > 5 * 60 * 1000; // 5 minutes

            if (shouldRefresh) {
                console.log('Refreshing user data from Prima789...');
                
                // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å Prima789 (‡∏™‡∏°‡∏°‡∏∏‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏°‡∏µ API ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏∞‡∏ö‡∏ö sync)
                const updatedResult = await client.query(`
                    UPDATE line_accounts 
                    SET 
                        last_sync_at = NOW(),
                        updated_at = NOW()
                    WHERE line_user_id = $1 
                    RETURNING *
                `, [lineUserId]);

                if (updatedResult.rows.length > 0) {
                    userData = updatedResult.rows[0]; // ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ let ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ assign ‡πÑ‡∏î‡πâ
                }
            }

            // 3. ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)
            const transactionsResult = await client.query(`
                SELECT 
                    tl.id,
                    tl.transaction_type,
                    tl.amount,
                    tl.balance_before,
                    tl.balance_after,
                    tl.details,
                    tl.created_at
                FROM transaction_logs tl
                WHERE tl.prima789_user_id = $1
                ORDER BY tl.created_at DESC
                LIMIT 10
            `, [userData.prima789_user_id]);

            // 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á Balance Card
            const cardMessage = createBalanceCard(userData, transactionsResult.rows);
            await sendBalanceCard(lineUserId, cardMessage);

            // 5. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï last_sync_at
            await client.query(`
                UPDATE line_accounts 
                SET last_sync_at = NOW()
                WHERE line_user_id = $1
            `, [lineUserId]);

            // 6. Log ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á
            await client.query(`
                INSERT INTO sync_logs (
                    line_user_id, prima789_user_id, sync_type, 
                    status, details, created_at
                ) VALUES ($1, $2, $3, $4, $5, NOW())
            `, [
                lineUserId,
                userData.prima789_user_id,
                'balance_inquiry',
                'success',
                JSON.stringify({
                    request_type: requestType,
                    balance: userData.balance,
                    points: userData.points,
                    tier: userData.tier
                })
            ]);

            return {
                statusCode: 200,
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    success: true,
                    message: 'Balance card sent successfully',
                    data: {
                        username: userData.username,
                        balance: userData.balance,
                        points: userData.points,
                        tier: userData.tier,
                        last_updated: userData.updated_at
                    }
                })
            };

        } finally {
            client.release();
            await pool.end();
        }

    } catch (error) {
        console.error('Balance inquiry error:', error);
        
        return {
            statusCode: 500,
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                success: false,
                error: 'Balance inquiry error',
                message: 'Failed to process balance inquiry',
                details: process.env.NODE_ENV === 'development' ? error.message : undefined
            })
        };
    }
};

// ‡∏™‡∏£‡πâ‡∏≤‡∏á Balance Card Message
function createBalanceCard(userData, transactions) {
    const tier = userData.tier || 'Bronze';
    const tierEmoji = {
        'Bronze': 'ü•â',
        'Silver': 'ü•à', 
        'Gold': 'ü•á',
        'Platinum': 'üíé',
        'Diamond': 'üí†'
    };

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì progress bar ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
    const pointsProgress = Math.min((userData.points || 0) / 1000, 1) * 100;
    const progressBar = '‚ñì'.repeat(Math.floor(pointsProgress / 10)) + '‚ñí'.repeat(10 - Math.floor(pointsProgress / 10));

    // Format ‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const recentTransactions = transactions.slice(0, 3).map(tx => {
        const date = new Date(tx.created_at).toLocaleDateString('th-TH', {
            day: '2-digit',
            month: '2-digit'
        });
        const amount = tx.amount >= 0 ? `+‡∏ø${tx.amount.toLocaleString()}` : `-‡∏ø${Math.abs(tx.amount).toLocaleString()}`;
        const emoji = tx.amount >= 0 ? 'üí∞' : 'üí∏';
        return `${emoji} ${date} ${amount}`;
    }).join('\n') || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°';

    return {
        type: 'flex',
        altText: `üí≥ Prima789 Member Card - Balance: ‡∏ø${(userData.balance || 0).toLocaleString()}`,
        contents: {
            type: 'bubble',
            size: 'giga',
            header: {
                type: 'box',
                layout: 'vertical',
                backgroundColor: '#1a1a2e',
                paddingAll: '20px',
                spacing: 'md',
                contents: [
                    {
                        type: 'box',
                        layout: 'horizontal',
                        contents: [
                            {
                                type: 'text',
                                text: 'üí≥ PRIMA789',
                                color: '#ffffff',
                                size: 'xl',
                                weight: 'bold',
                                flex: 1
                            },
                            {
                                type: 'text',
                                text: `${tierEmoji[tier] || 'ü•â'} ${tier}`,
                                color: '#ffd700',
                                size: 'md',
                                weight: 'bold',
                                align: 'end'
                            }
                        ]
                    },
                    {
                        type: 'text',
                        text: userData.display_name || userData.username || 'Member',
                        color: '#cccccc',
                        size: 'sm'
                    }
                ]
            },
            body: {
                type: 'box',
                layout: 'vertical',
                backgroundColor: '#16213e',
                paddingAll: '20px',
                spacing: 'lg',
                contents: [
                    // ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠
                    {
                        type: 'box',
                        layout: 'vertical',
                        backgroundColor: '#0f3460',
                        cornerRadius: 'md',
                        paddingAll: '15px',
                        spacing: 'sm',
                        contents: [
                            {
                                type: 'text',
                                text: 'üí∞ ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠',
                                color: '#a0a0a0',
                                size: 'sm'
                            },
                            {
                                type: 'text',
                                text: `‡∏ø${(userData.balance || 0).toLocaleString()}`,
                                color: '#00ff88',
                                size: 'xxl',
                                weight: 'bold'
                            }
                        ]
                    },
                    // ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏∞‡∏™‡∏°
                    {
                        type: 'box',
                        layout: 'vertical',
                        backgroundColor: '#0f3460',
                        cornerRadius: 'md',
                        paddingAll: '15px',
                        spacing: 'sm',
                        contents: [
                            {
                                type: 'text',
                                text: 'üéØ ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏∞‡∏™‡∏°',
                                color: '#a0a0a0',
                                size: 'sm'
                            },
                            {
                                type: 'text',
                                text: `${(userData.points || 0).toLocaleString()} pts`,
                                color: '#ffdd44',
                                size: 'xl',
                                weight: 'bold'
                            },
                            {
                                type: 'text',
                                text: progressBar,
                                color: '#666666',
                                size: 'xs'
                            }
                        ]
                    },
                    // ‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                    {
                        type: 'box',
                        layout: 'vertical',
                        backgroundColor: '#0f3460',
                        cornerRadius: 'md',
                        paddingAll: '15px',
                        spacing: 'sm',
                        contents: [
                            {
                                type: 'text',
                                text: 'üìä ‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î',
                                color: '#a0a0a0',
                                size: 'sm'
                            },
                            {
                                type: 'text',
                                text: recentTransactions,
                                color: '#ffffff',
                                size: 'xs',
                                wrap: true
                            }
                        ]
                    }
                ]
            },
            footer: {
                type: 'box',
                layout: 'vertical',
                backgroundColor: '#1a1a2e',
                paddingAll: '15px',
                spacing: 'sm',
                contents: [
                    {
                        type: 'box',
                        layout: 'horizontal',
                        spacing: 'sm',
                        contents: [
                            {
                                type: 'button',
                                style: 'primary',
                                color: '#00ff88',
                                action: {
                                    type: 'postback',
                                    label: 'üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï',
                                    data: 'action=refresh_balance'
                                },
                                flex: 1
                            },
                            {
                                type: 'button',
                                style: 'secondary',
                                action: {
                                    type: 'postback',
                                    label: 'üìà ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥',
                                    data: 'action=view_history'
                                },
                                flex: 1
                            }
                        ]
                    },
                    {
                        type: 'text',
                        text: `‚è∞ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${new Date().toLocaleString('th-TH')}`,
                        color: '#888888',
                        size: 'xxs',
                        align: 'center'
                    }
                ]
            }
        }
    };
}

// ‡∏™‡πà‡∏á Balance Card ‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE
async function sendBalanceCard(lineUserId, cardMessage) {
    try {
        const response = await fetch('https://api.line.me/v2/bot/message/push', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${LINE_CHANNEL_ACCESS_TOKEN}`
            },
            body: JSON.stringify({
                to: lineUserId,
                messages: [cardMessage]
            })
        });

        if (!response.ok) {
            const error = await response.text();
            console.error('LINE push message error:', error);
            throw new Error(`LINE API error: ${response.status}`);
        }

        console.log('Balance card sent successfully');
        return true;

    } catch (error) {
        console.error('Send balance card error:', error);
        throw error;
    }
}

// ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ
async function sendNotLinkedMessage(lineUserId) {
    const message = {
        type: 'flex',
        altText: '‚ùå ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á',
        contents: {
            type: 'bubble',
            body: {
                type: 'box',
                layout: 'vertical',
                spacing: 'md',
                contents: [
                    {
                        type: 'text',
                        text: '‚ùå ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á',
                        weight: 'bold',
                        size: 'lg',
                        color: '#ff6b6b'
                    },
                    {
                        type: 'text',
                        text: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ú‡πà‡∏≤‡∏ô Prima789.com ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ LINE ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
                        wrap: true,
                        color: '#666666'
                    }
                ]
            },
            footer: {
                type: 'box',
                layout: 'vertical',
                spacing: 'sm',
                contents: [
                    {
                        type: 'button',
                        style: 'primary',
                        height: 'sm',
                        action: {
                            type: 'uri',
                            label: 'üîó ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ',
                            uri: 'https://prima789.com/login'
                        }
                    }
                ]
            }
        }
    };

    try {
        const response = await fetch('https://api.line.me/v2/bot/message/push', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${LINE_CHANNEL_ACCESS_TOKEN}`
            },
            body: JSON.stringify({
                to: lineUserId,
                messages: [message]
            })
        });

        if (!response.ok) {
            const error = await response.text();
            console.error('LINE push message error:', error);
        }

    } catch (error) {
        console.error('Send not linked message error:', error);
    }
}