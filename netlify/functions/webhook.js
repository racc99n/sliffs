import crypto from 'crypto';
import pkg from 'pg';
const { Pool } = pkg;

const LINE_CHANNEL_ACCESS_TOKEN = process.env.LINE_CHANNEL_ACCESS_TOKEN;
const LINE_CHANNEL_SECRET = process.env.LINE_CHANNEL_SECRET;

export const handler = async (event, context) => {
    try {
        console.log('Received LINE webhook event:', JSON.stringify(event, null, 2));

        // Verify LINE signature
        const signature = event.headers['x-line-signature'];
        const body = event.body;

        if (!verifySignature(body, signature)) {
            console.error('Invalid LINE signature');
            return {
                statusCode: 401,
                body: JSON.stringify({ error: 'Invalid signature' })
            };
        }

        const data = JSON.parse(body);
        const { events } = data;

        if (!events || events.length === 0) {
            return {
                statusCode: 200,
                body: JSON.stringify({ message: 'No events to process' })
            };
        }

        // Process each event
        for (const lineEvent of events) {
            await processEvent(lineEvent);
        }

        return {
            statusCode: 200,
            body: JSON.stringify({ message: 'Events processed successfully' })
        };

    } catch (error) {
        console.error('Webhook error:', error);
        return {
            statusCode: 500,
            body: JSON.stringify({ error: 'Internal server error' })
        };
    }
};

// Verify LINE signature
function verifySignature(body, signature) {
    if (!signature || !LINE_CHANNEL_SECRET) {
        return false;
    }

    const expectedSignature = crypto
        .createHmac('SHA256', LINE_CHANNEL_SECRET)
        .update(body)
        .digest('base64');

    return `sha256=${expectedSignature}` === signature;
}

// Process LINE event
async function processEvent(event) {
    const { type, source, replyToken } = event;
    const userId = source.userId;

    console.log(`Processing event: ${type} from user: ${userId}`);

    try {
        switch (type) {
            case 'follow':
                await handleFollowEvent(userId, replyToken);
                break;

            case 'unfollow':
                await handleUnfollowEvent(userId);
                break;

            case 'message':
                await handleMessageEvent(event);
                break;

            case 'postback':
                await handlePostbackEvent(event);
                break;

            default:
                console.log(`Unhandled event type: ${type}`);
        }
    } catch (error) {
        console.error(`Error processing ${type} event:`, error);
    }
}

// Handle follow event
async function handleFollowEvent(userId, replyToken) {
    try {
        console.log(`User ${userId} followed the bot`);

        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö
        const welcomeMessage = {
            type: 'flex',
            altText: '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà Prima789 Member Card',
            contents: {
                type: 'bubble',
                header: {
                    type: 'box',
                    layout: 'vertical',
                    contents: [
                        {
                            type: 'text',
                            text: 'üé∞ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö',
                            weight: 'bold',
                            size: 'xl',
                            color: '#ffffff'
                        },
                        {
                            type: 'text',
                            text: 'Prima789 Member Card',
                            size: 'sm',
                            color: '#ffffff',
                            margin: 'sm'
                        }
                    ],
                    backgroundColor: '#FF6B6B',
                    paddingAll: '20px'
                },
                body: {
                    type: 'box',
                    layout: 'vertical',
                    contents: [
                        {
                            type: 'text',
                            text: '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏•',
                            wrap: true,
                            color: '#333333',
                            size: 'md',
                            margin: 'lg'
                        },
                        {
                            type: 'text',
                            text: '1. ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì\n2. ‡∏î‡∏π‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏ö‡∏ö Real-time\n3. ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥',
                            wrap: true,
                            color: '#666666',
                            size: 'sm',
                            margin: 'lg'
                        }
                    ]
                },
                footer: {
                    type: 'box',
                    layout: 'vertical',
                    spacing: 'sm',
                    contents: [
                        {
                            type: 'button',
                            style: 'primary',
                            height: 'sm',
                            action: {
                                type: 'postback',
                                label: 'üîó ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ',
                                data: 'action=link_account'
                            },
                            color: '#FF6B6B'
                        },
                        {
                            type: 'button',
                            style: 'secondary',
                            height: 'sm',
                            action: {
                                type: 'postback',
                                label: 'üí≥ ‡∏î‡∏π‡∏ö‡∏±‡∏ï‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å',
                                data: 'action=view_card'
                            }
                        }
                    ],
                    flex: 0
                }
            }
        };

        await replyMessage(replyToken, [welcomeMessage]);

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô database
        await saveUserActivity(userId, 'follow', { welcomeSent: true });

    } catch (error) {
        console.error('Follow event error:', error);
    }
}

// Handle unfollow event
async function handleUnfollowEvent(userId) {
    try {
        console.log(`User ${userId} unfollowed the bot`);
        
        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô database
        await saveUserActivity(userId, 'unfollow', {});

    } catch (error) {
        console.error('Unfollow event error:', error);
    }
}

// Handle message event
async function handleMessageEvent(event) {
    const { message, source, replyToken } = event;
    const userId = source.userId;
    const messageText = message.text?.toLowerCase() || '';

    console.log(`Message from ${userId}: ${messageText}`);

    try {
        // ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á ‡πÜ
        if (messageText.includes('‡∏ö‡∏±‡∏ï‡∏£') || messageText.includes('card')) {
            await sendMemberCardMenu(replyToken);
        } else if (messageText.includes('‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°') || messageText.includes('link')) {
            await sendAccountLinkingMenu(replyToken);
        } else if (messageText.includes('‡∏¢‡∏≠‡∏î') || messageText.includes('balance')) {
            await sendQuickBalance(userId, replyToken);
        } else if (messageText.includes('help') || messageText.includes('‡∏ä‡πà‡∏ß‡∏¢')) {
            await sendHelpMenu(replyToken);
        } else {
            // Default response
            await sendDefaultResponse(replyToken);
        }

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤
        await saveUserActivity(userId, 'message', { messageText });

    } catch (error) {
        console.error('Message event error:', error);
    }
}

// Handle postback event
async function handlePostbackEvent(event) {
    const { postback, source, replyToken } = event;
    const userId = source.userId;
    const data = postback.data;

    console.log(`Postback from ${userId}: ${data}`);

    try {
        const params = new URLSearchParams(data);
        const action = params.get('action');

        switch (action) {
            case 'link_account':
                await handleLinkAccount(userId, replyToken);
                break;

            case 'view_card':
                await handleViewCard(userId, replyToken);
                break;

            case 'refresh_data':
                await handleRefreshData(userId, replyToken);
                break;

            case 'help':
                await sendHelpMenu(replyToken);
                break;

            default:
                console.log(`Unhandled postback action: ${action}`);
        }

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å postback activity
        await saveUserActivity(userId, 'postback', { action, data });

    } catch (error) {
        console.error('Postback event error:', error);
    }
}

// Send member card menu
async function sendMemberCardMenu(replyToken) {
    const message = {
        type: 'flex',
        altText: 'Prima789 Member Card Menu',
        contents: {
            type: 'bubble',
            body: {
                type: 'box',
                layout: 'vertical',
                contents: [
                    {
                        type: 'text',
                        text: 'üí≥ ‡∏ö‡∏±‡∏ï‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å Prima789',
                        weight: 'bold',
                        size: 'xl',
                        color: '#333333'
                    },
                    {
                        type: 'text',
                        text: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
                        size: 'sm',
                        color: '#666666',
                        margin: 'lg'
                    }
                ]
            },
            footer: {
                type: 'box',
                layout: 'vertical',
                spacing: 'sm',
                contents: [
                    {
                        type: 'button',
                        style: 'primary',
                        action: {
                            type: 'postback',
                            label: 'üëÄ ‡∏î‡∏π‡∏ö‡∏±‡∏ï‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å',
                            data: 'action=view_card'
                        }
                    },
                    {
                        type: 'button',
                        style: 'secondary',
                        action: {
                            type: 'postback',
                            label: 'üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
                            data: 'action=refresh_data'
                        }
                    }
                ]
            }
        }
    };

    await replyMessage(replyToken, [message]);
}

// Handle link account
async function handleLinkAccount(userId, replyToken) {
    const message = {
        type: 'flex',
        altText: '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Prima789',
        contents: {
            type: 'bubble',
            body: {
                type: 'box',
                layout: 'vertical',
                contents: [
                    {
                        type: 'text',
                        text: 'üîó ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ',
                        weight: 'bold',
                        size: 'xl',
                        color: '#333333'
                    },
                    {
                        type: 'text',
                        text: '‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå Prima789.com',
                        wrap: true,
                        size: 'sm',
                        color: '#666666',
                        margin: 'lg'
                    },
                    {
                        type: 'text',
                        text: '‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ LINE ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥',
                        wrap: true,
                        size: 'xs',
                        color: '#999999',
                        margin: 'md'
                    }
                ]
            },
            footer: {
                type: 'box',
                layout: 'vertical',
                spacing: 'sm',
                contents: [
                    {
                        type: 'button',
                        style: 'primary',
                        action: {
                            type: 'uri',
                            label: 'üåê ‡πÑ‡∏õ‡∏ó‡∏µ‡πà Prima789.com',
                            uri: 'https://prima789.com/login'
                        }
                    }
                ]
            }
        }
    };

    await replyMessage(replyToken, [message]);
}

// Handle view card
async function handleViewCard(userId, replyToken) {
    try {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á
        const linkStatus = await checkAccountLinking(userId);

        if (!linkStatus.isLinked) {
            await sendNotLinkedMessage(replyToken);
            return;
        }

        // ‡∏™‡πà‡∏á LIFF URL
        const message = {
            type: 'flex',
            altText: 'Prima789 Member Card',
            contents: {
                type: 'bubble',
                body: {
                    type: 'box',
                    layout: 'vertical',
                    contents: [
                        {
                            type: 'text',
                            text: 'üí≥ ‡∏ö‡∏±‡∏ï‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
                            weight: 'bold',
                            size: 'xl',
                            color: '#333333'
                        },
                        {
                            type: 'text',
                            text: `‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô: ‡∏ø${linkStatus.data?.balance?.toLocaleString() || '0'}`,
                            size: 'md',
                            color: '#4CAF50',
                            margin: 'lg',
                            weight: 'bold'
                        },
                        {
                            type: 'text',
                            text: `‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: ${linkStatus.data?.points?.toLocaleString() || '0'} pts`,
                            size: 'sm',
                            color: '#FF9800',
                            margin: 'sm'
                        }
                    ]
                },
                footer: {
                    type: 'box',
                    layout: 'vertical',
                    spacing: 'sm',
                    contents: [
                        {
                            type: 'button',
                            style: 'primary',
                            action: {
                                type: 'uri',
                                label: 'üì± ‡πÄ‡∏õ‡∏¥‡∏î‡∏ö‡∏±‡∏ï‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å',
                                uri: `https://liff.line.me/${process.env.LINE_LIFF_ID_MEMBER_CARD || 'YOUR_LIFF_ID'}`
                            }
                        }
                    ]
                }
            }
        };

        await replyMessage(replyToken, [message]);

    } catch (error) {
        console.error('View card error:', error);
        await sendErrorMessage(replyToken);
    }
}

// Handle refresh data
async function handleRefreshData(userId, replyToken) {
    try {
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å sync API
        const syncResult = await syncUserData(userId);

        if (syncResult.success) {
            const message = {
                type: 'text',
                text: `‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n\n‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô: ‡∏ø${syncResult.data?.balance?.toLocaleString() || '0'}\n‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: ${syncResult.data?.points?.toLocaleString() || '0'} pts\n‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏°‡∏∑‡πà‡∏≠: ${new Date().toLocaleString('th-TH')}`
            };
            await replyMessage(replyToken, [message]);
        } else {
            await sendErrorMessage(replyToken);
        }

    } catch (error) {
        console.error('Refresh data error:', error);
        await sendErrorMessage(replyToken);
    }
}

// Send not linked message
async function sendNotLinkedMessage(replyToken) {
    const message = {
        type: 'text',
        text: '‚ùå ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ú‡πà‡∏≤‡∏ô Prima789.com ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ LINE ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì'
    };
    await replyMessage(replyToken, [message]);
}

// Send help menu
async function sendHelpMenu(replyToken) {
    const message = {
        type: 'text',
        text: 'üìã ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:\n\nüí≥ "‡∏ö‡∏±‡∏ï‡∏£" - ‡∏î‡∏π‡∏ö‡∏±‡∏ï‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å\nüîó "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á" - ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ\nüí∞ "‡∏¢‡∏≠‡∏î" - ‡∏î‡∏π‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡πà‡∏ß‡∏ô\n‚ùì "help" - ‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n\n‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢'
    };
    await replyMessage(replyToken, [message]);
}

// Send default response
async function sendDefaultResponse(replyToken) {
    const message = {
        type: 'text',
        text: '‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! üëã\n\n‡∏û‡∏¥‡∏°‡∏û‡πå "help" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢'
    };
    await replyMessage(replyToken, [message]);
}

// Send error message
async function sendErrorMessage(replyToken) {
    const message = {
        type: 'text',
        text: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏à‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà'
    };
    await replyMessage(replyToken, [message]);
}

// Send quick balance
async function sendQuickBalance(userId, replyToken) {
    try {
        const linkStatus = await checkAccountLinking(userId);

        if (!linkStatus.isLinked) {
            await sendNotLinkedMessage(replyToken);
            return;
        }

        const data = linkStatus.data;
        const message = {
            type: 'text',
            text: `üí∞ ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ‡∏ø${data?.balance?.toLocaleString() || '0'}\nüéØ ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏∞‡∏™‡∏°: ${data?.points?.toLocaleString() || '0'} pts\nüëë ‡∏£‡∏∞‡∏î‡∏±‡∏ö: ${data?.tier || 'Bronze'}\n\n‚è∞ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${new Date().toLocaleString('th-TH')}`
        };
        await replyMessage(replyToken, [message]);

    } catch (error) {
        console.error('Quick balance error:', error);
        await sendErrorMessage(replyToken);
    }
}

// Reply message to LINE
async function replyMessage(replyToken, messages) {
    try {
        const response = await fetch('https://api.line.me/v2/bot/message/reply', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${LINE_CHANNEL_ACCESS_TOKEN}`
            },
            body: JSON.stringify({
                replyToken,
                messages
            })
        });

        if (!response.ok) {
            const error = await response.text();
            console.error('LINE API error:', error);
        }

    } catch (error) {
        console.error('Reply message error:', error);
    }
}

// Helper functions
async function checkAccountLinking(userId) {
    try {
        const response = await fetch(`${process.env.NETLIFY_URL}/.netlify/functions/check-account-linking?lineUserId=${userId}`);
        const data = await response.json();
        return data;
    } catch (error) {
        console.error('Check linking error:', error);
        return { success: false, isLinked: false };
    }
}

async function syncUserData(userId) {
    try {
        const response = await fetch(`${process.env.NETLIFY_URL}/.netlify/functions/sync-user-data`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ lineUserId: userId, forceSync: true })
        });
        const data = await response.json();
        return data;
    } catch (error) {
        console.error('Sync user data error:', error);
        return { success: false };
    }
}

async function saveUserActivity(userId, activityType, details) {
    try {
        const pool = new Pool({
            connectionString: process.env.NETLIFY_DATABASE_URL,
            ssl: { rejectUnauthorized: false }
        });

        const client = await pool.connect();
        
        await client.query(`
            INSERT INTO sync_logs (line_user_id, sync_type, status, details, created_at)
            VALUES ($1, $2, $3, $4, NOW())
        `, [userId, activityType, 'success', JSON.stringify(details)]);

        client.release();
        await pool.end();
        
    } catch (error) {
        console.error('Save activity error:', error);
    }
}