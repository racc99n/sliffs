const {
  upsertLineUser,
  checkUserLinking,
  getUserTransactions,
  getPrima789Account,
  logSystemEvent,
} = require('./utils/database')

const LINE_CHANNEL_SECRET = process.env.LINE_CHANNEL_SECRET
const LINE_CHANNEL_ACCESS_TOKEN = process.env.LINE_CHANNEL_ACCESS_TOKEN
const crypto = require('crypto')

exports.handler = async (event, context) => {
  console.log('ü§ñ LINE Bot Webhook - Start')

  // CORS headers
  const headers = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers':
      'Content-Type, Authorization, X-Line-Signature',
    'Access-Control-Allow-Methods': 'POST, OPTIONS',
    'Content-Type': 'application/json',
  }

  if (event.httpMethod === 'OPTIONS') {
    return { statusCode: 200, headers, body: '' }
  }

  if (event.httpMethod !== 'POST') {
    return {
      statusCode: 405,
      headers,
      body: JSON.stringify({
        success: false,
        error: 'Method not allowed',
      }),
    }
  }

  try {
    // Verify LINE signature
    const signature = event.headers['x-line-signature']
    const body = event.body

    if (!verifyLineSignature(body, signature)) {
      console.log('‚ùå Invalid LINE signature')
      return {
        statusCode: 401,
        headers,
        body: JSON.stringify({
          success: false,
          error: 'Invalid signature',
        }),
      }
    }

    const webhookData = JSON.parse(body)
    console.log('üì• LINE Webhook received:', {
      destination: webhookData.destination,
      events: webhookData.events?.length || 0,
    })

    // Process each event
    const responses = []

    for (const event of webhookData.events || []) {
      try {
        const response = await processLineEvent(event)
        if (response) {
          responses.push(response)
        }
      } catch (error) {
        console.error('Error processing event:', error)
        await logSystemEvent(
          'ERROR',
          'webhook-process-event',
          `Error processing LINE event: ${error.message}`,
          { event_type: event.type, error: error.message }
        )
      }
    }

    console.log(
      `‚úÖ LINE Webhook processed ${webhookData.events?.length || 0} events`
    )

    return {
      statusCode: 200,
      headers,
      body: JSON.stringify({
        success: true,
        processed_events: webhookData.events?.length || 0,
        responses: responses.length,
      }),
    }
  } catch (error) {
    console.error('‚ùå LINE Webhook Error:', error)

    await logSystemEvent(
      'ERROR',
      'webhook',
      `Webhook processing error: ${error.message}`,
      { error: error.message, stack: error.stack }
    )

    return {
      statusCode: 500,
      headers,
      body: JSON.stringify({
        success: false,
        error: 'Internal server error',
      }),
    }
  }
}

// Verify LINE signature
function verifyLineSignature(body, signature) {
  if (!LINE_CHANNEL_SECRET || !signature) {
    console.log('Missing channel secret or signature')
    return false
  }

  const hash = crypto
    .createHmac('sha256', LINE_CHANNEL_SECRET)
    .update(body, 'utf8')
    .digest('base64')

  return signature === `sha256=${hash}`
}

// Process individual LINE event
async function processLineEvent(event) {
  console.log(
    `Processing ${event.type} event from user: ${event.source?.userId}`
  )

  switch (event.type) {
    case 'message':
      return await handleMessage(event)
    case 'postback':
      return await handlePostback(event)
    case 'follow':
      return await handleFollow(event)
    case 'unfollow':
      return await handleUnfollow(event)
    case 'join':
      return await handleJoin(event)
    case 'accountLink':
      return await handleAccountLink(event)
    default:
      console.log(`Unhandled event type: ${event.type}`)
      return null
  }
}

// Handle text messages
async function handleMessage(event) {
  if (event.message.type !== 'text') {
    return null
  }

  const userId = event.source.userId
  const messageText = event.message.text.toLowerCase().trim()

  console.log(`üìù Message from ${userId}: ${messageText}`)

  // Get user profile and sync
  const userProfile = await getLineUserProfile(userId)
  if (userProfile) {
    await upsertLineUser(userProfile)
  }

  let replyMessage = null

  // Command handling
  if (
    messageText.includes('‡∏ö‡∏±‡∏ï‡∏£') ||
    messageText.includes('member') ||
    messageText.includes('card')
  ) {
    replyMessage = await handleMemberCardCommand(userId)
  } else if (
    messageText.includes('‡∏¢‡∏≠‡∏î') ||
    messageText.includes('‡πÄ‡∏á‡∏¥‡∏ô') ||
    messageText.includes('balance')
  ) {
    replyMessage = await handleBalanceCommand(userId)
  } else if (
    messageText.includes('‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥') ||
    messageText.includes('history') ||
    messageText.includes('transaction')
  ) {
    replyMessage = await handleHistoryCommand(userId)
  } else if (
    messageText.includes('‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á') ||
    messageText.includes('link') ||
    messageText.includes('‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°')
  ) {
    replyMessage = await handleLinkCommand(userId)
  } else if (
    messageText.includes('‡∏ä‡πà‡∏ß‡∏¢') ||
    messageText.includes('help') ||
    messageText.includes('‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á')
  ) {
    replyMessage = getHelpMessage()
  } else if (
    messageText.includes('‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ') ||
    messageText.includes('hello') ||
    messageText.includes('hi')
  ) {
    replyMessage = await getWelcomeMessage(userId)
  } else {
    // Default response
    replyMessage = {
      type: 'text',
      text: 'ü§ñ ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ú‡∏°‡πÄ‡∏õ‡πá‡∏ô Prima789 Member Card Bot\n\n‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ\n‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏•‡∏¢!',
    }
  }

  if (replyMessage) {
    await sendReplyMessage(event.replyToken, replyMessage)
    return replyMessage
  }

  return null
}

// Handle postback events (from Rich Menu or buttons)
async function handlePostback(event) {
  const userId = event.source.userId
  const postbackData = event.postback.data

  console.log(`üîò Postback from ${userId}: ${postbackData}`)

  const params = new URLSearchParams(postbackData)
  const action = params.get('action')

  let replyMessage = null

  switch (action) {
    case 'check_balance':
      replyMessage = await handleBalanceCommand(userId)
      break
    case 'transaction_history':
      const limit = parseInt(params.get('limit')) || 5
      replyMessage = await handleHistoryCommand(userId, limit)
      break
    case 'open_member_card':
      replyMessage = await handleMemberCardCommand(userId)
      break
    case 'account_linking':
      replyMessage = await handleLinkCommand(userId)
      break
    case 'help':
      replyMessage = getHelpMessage()
      break
    case 'refresh_data':
      replyMessage = await handleRefreshCommand(userId)
      break
    default:
      replyMessage = {
        type: 'text',
        text: 'ü§ñ ‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÑ‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ\n‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ',
      }
  }

  if (replyMessage) {
    await sendReplyMessage(event.replyToken, replyMessage)
    return replyMessage
  }

  return null
}

// Handle follow event (user adds bot as friend)
async function handleFollow(event) {
  const userId = event.source.userId
  console.log(`üëã New follower: ${userId}`)

  // Get and sync user profile
  const userProfile = await getLineUserProfile(userId)
  if (userProfile) {
    await upsertLineUser(userProfile)

    await logSystemEvent(
      'INFO',
      'webhook-follow',
      `New follower: ${userProfile.displayName}`,
      { user_profile: userProfile },
      userId
    )
  }

  const welcomeMessage = await getWelcomeMessage(userId)
  await sendReplyMessage(event.replyToken, welcomeMessage)

  return welcomeMessage
}

// Handle unfollow event
async function handleUnfollow(event) {
  const userId = event.source.userId
  console.log(`üëã User unfollowed: ${userId}`)

  await logSystemEvent(
    'INFO',
    'webhook-unfollow',
    `User unfollowed: ${userId}`,
    { user_id: userId },
    userId
  )

  return null
}

// Handle join event (bot added to group/room)
async function handleJoin(event) {
  console.log('üéâ Bot added to group/room')

  const groupWelcomeMessage = {
    type: 'text',
    text: 'üé∞ ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ú‡∏°‡πÄ‡∏õ‡πá‡∏ô Prima789 Member Card Bot\n\n‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏°‡∏ô‡∏π‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ï‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì\n‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
  }

  await sendReplyMessage(event.replyToken, groupWelcomeMessage)
  return groupWelcomeMessage
}

// Handle account link event
async function handleAccountLink(event) {
  const userId = event.source.userId
  const linkToken = event.link.linkToken

  console.log(`üîó Account link event from ${userId}, token: ${linkToken}`)

  // This would be used for LINE Login integration
  // For now, we'll just send a message
  const linkMessage = {
    type: 'text',
    text: 'üîó Account linking detected!\nPlease use the Member Card menu to complete linking with Prima789.',
  }

  await sendReplyMessage(event.replyToken, linkMessage)
  return linkMessage
}

// Command handlers
async function handleMemberCardCommand(userId) {
  const linkingInfo = await checkUserLinking(userId)

  if (!linkingInfo || !linkingInfo.is_linked) {
    return {
      type: 'template',
      altText: '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Prima789',
      template: {
        type: 'buttons',
        text: 'üí≥ Member Card\n\n‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö Prima789\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
        actions: [
          {
            type: 'uri',
            label: 'üîó ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ',
            uri: `${process.env.NETLIFY_URL}/liff-account-linking.html`,
          },
          {
            type: 'uri',
            label: 'üåê ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å',
            uri: 'https://prima789.com/register',
          },
        ],
      },
    }
  }

  return {
    type: 'template',
    altText: 'Prima789 Member Card',
    template: {
      type: 'buttons',
      text: `üí≥ Member Card\n\n‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ${linkingInfo.display_name}\n‡∏ö‡∏±‡∏ç‡∏ä‡∏µ: ${
        linkingInfo.prima789_username
      }\n‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô: ‡∏ø${parseFloat(linkingInfo.balance || 0).toLocaleString()}`,
      actions: [
        {
          type: 'uri',
          label: 'üì± ‡πÄ‡∏õ‡∏¥‡∏î Member Card',
          uri: `${process.env.NETLIFY_URL}/liff-member-card.html`,
        },
        {
          type: 'postback',
          label: 'üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô',
          data: 'action=refresh_data',
        },
      ],
    },
  }
}

async function handleBalanceCommand(userId) {
  const linkingInfo = await checkUserLinking(userId)

  if (!linkingInfo || !linkingInfo.is_linked) {
    return {
      type: 'text',
      text: '‚ùå ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Prima789 ‡∏Å‡πà‡∏≠‡∏ô‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô\n\n‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ô‡∏π "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô',
    }
  }

  const account = await getPrima789Account(linkingInfo.prima789_username)

  if (!account) {
    return {
      type: 'text',
      text: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Prima789\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ù‡πà‡∏≤‡∏¢‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô',
    }
  }

  const balance = parseFloat(account.available) || 0
  const creditLimit = parseFloat(account.credit_limit) || 0
  const points = parseInt(account.points) || 0

  return {
    type: 'template',
    altText: `üí∞ ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ‡∏ø${balance.toLocaleString()}`,
    template: {
      type: 'buttons',
      text:
        `üí∞ ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠\n\n` +
        `üè¶ ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô: ‡∏ø${balance.toLocaleString()}\n` +
        `üí≥ ‡∏ß‡∏á‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï: ‡∏ø${creditLimit.toLocaleString()}\n` +
        `‚≠ê ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏∞‡∏™‡∏°: ${points.toLocaleString()} ‡πÅ‡∏ï‡πâ‡∏°\n` +
        `üèÖ ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å: ${account.tier}`,
      actions: [
        {
          type: 'uri',
          label: 'üì± ‡πÄ‡∏õ‡∏¥‡∏î Member Card',
          uri: `${process.env.NETLIFY_URL}/liff-member-card.html`,
        },
        {
          type: 'postback',
          label: 'üìä ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°',
          data: 'action=transaction_history&limit=5',
        },
      ],
    },
  }
}

async function handleHistoryCommand(userId, limit = 5) {
  const linkingInfo = await checkUserLinking(userId)

  if (!linkingInfo || !linkingInfo.is_linked) {
    return {
      type: 'text',
      text: '‚ùå ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Prima789 ‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥',
    }
  }

  const transactions = await getUserTransactions(userId, limit)

  if (transactions.length === 0) {
    return {
      type: 'text',
      text: 'üìä ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°\n\n‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö\n‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡πÉ‡∏ô Prima789 ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà',
    }
  }

  let historyText = 'üìä ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏° (5 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)\n\n'

  for (const tx of transactions) {
    const date = new Date(tx.created_at).toLocaleDateString('th-TH', {
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
    })

    const icon = getTransactionIcon(tx.transaction_type)
    const amount = Math.abs(parseFloat(tx.amount) || 0)
    const sign = ['withdraw', 'bet'].includes(tx.transaction_type) ? '-' : '+'

    historyText += `${icon} ${getTransactionName(tx.transaction_type)}\n`
    historyText += `   ${sign}‡∏ø${amount.toLocaleString()} | ${date}\n\n`
  }

  return {
    type: 'template',
    altText: historyText,
    template: {
      type: 'buttons',
      text:
        historyText.substring(0, 400) + (historyText.length > 400 ? '...' : ''),
      actions: [
        {
          type: 'uri',
          label: 'üì± ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°',
          uri: `${process.env.NETLIFY_URL}/liff-member-card.html`,
        },
        {
          type: 'postback',
          label: 'üí∞ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô',
          data: 'action=check_balance',
        },
      ],
    },
  }
}

async function handleLinkCommand(userId) {
  return {
    type: 'template',
    altText: '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Prima789',
    template: {
      type: 'buttons',
      text: 'üîó ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Prima789\n\n‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Prima789 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Member Card ‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏ö‡∏ö Real-time',
      actions: [
        {
          type: 'uri',
          label: 'üîó ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ',
          uri: `${process.env.NETLIFY_URL}/liff-account-linking.html`,
        },
        {
          type: 'uri',
          label: 'üåê ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å',
          uri: 'https://prima789.com/register',
        },
      ],
    },
  }
}

async function handleRefreshCommand(userId) {
  const linkingInfo = await checkUserLinking(userId)

  if (!linkingInfo || !linkingInfo.is_linked) {
    return {
      type: 'text',
      text: '‚ùå ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á\n‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ',
    }
  }

  return {
    type: 'text',
    text: 'üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...\n\n‡πÉ‡∏ä‡πâ Member Card ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î\n‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö Prima789.com ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö Real-time',
  }
}

// Helper functions
function getHelpMessage() {
  return {
    type: 'text',
    text:
      'ü§ñ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:\n\n' +
      'üí≥ "‡∏ö‡∏±‡∏ï‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å" - ‡πÄ‡∏õ‡∏¥‡∏î Member Card\n' +
      'üí∞ "‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô" - ‡πÄ‡∏ä‡πá‡∏Ñ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠\n' +
      'üìä "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥" - ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°\n' +
      'üîó "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á" - ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Prima789\n' +
      'üîÑ "‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä" - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î\n' +
      '‚ùì "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠" - ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ\n\n' +
      'üì± ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢!',
  }
}

async function getWelcomeMessage(userId) {
  const linkingInfo = await checkUserLinking(userId)

  if (linkingInfo && linkingInfo.is_linked) {
    return {
      type: 'template',
      altText: '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà Prima789 Member Card',
      template: {
        type: 'buttons',
        text: `üé∞ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà Prima789\n\n‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ${
          linkingInfo.display_name
        }!\n‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡πÅ‡∏•‡πâ‡∏ß\n\n‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô: ‡∏ø${parseFloat(
          linkingInfo.balance || 0
        ).toLocaleString()}`,
        actions: [
          {
            type: 'uri',
            label: 'üì± ‡πÄ‡∏õ‡∏¥‡∏î Member Card',
            uri: `${process.env.NETLIFY_URL}/liff-member-card.html`,
          },
          {
            type: 'postback',
            label: 'üí∞ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô',
            data: 'action=check_balance',
          },
        ],
      },
    }
  } else {
    return {
      type: 'template',
      altText: '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà Prima789 Member Card',
      template: {
        type: 'buttons',
        text: 'üé∞ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà Prima789\n\n‡∏ú‡∏°‡πÄ‡∏õ‡πá‡∏ô Member Card Bot ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Prima789 ‡∏ú‡πà‡∏≤‡∏ô LINE ‡πÑ‡∏î‡πâ‡∏™‡∏∞‡∏î‡∏ß‡∏Å\n\n‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Å‡∏±‡∏ô‡πÄ‡∏•‡∏¢!',
        actions: [
          {
            type: 'uri',
            label: 'üîó ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ',
            uri: `${process.env.NETLIFY_URL}/liff-account-linking.html`,
          },
          {
            type: 'postback',
            label: '‚ùì ‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠',
            data: 'action=help',
          },
        ],
      },
    }
  }
}

function getTransactionIcon(type) {
  const icons = {
    deposit: 'üí∞',
    withdraw: 'üí∏',
    bet: 'üé≤',
    win: 'üèÜ',
    bonus: 'üéÅ',
    data_sync: 'üîÑ',
    account_link: 'üîó',
    user_login: 'üîê',
  }
  return icons[type] || 'üìÑ'
}

function getTransactionName(type) {
  const names = {
    deposit: '‡∏ù‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô',
    withdraw: '‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô',
    bet: '‡∏ß‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô',
    win: '‡∏ä‡∏ô‡∏∞‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô',
    bonus: '‡πÇ‡∏ö‡∏ô‡∏±‡∏™',
    data_sync: '‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
    account_link: '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ',
    user_login: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö',
  }
  return names[type] || type
}

// Get LINE user profile
async function getLineUserProfile(userId) {
  if (!LINE_CHANNEL_ACCESS_TOKEN) {
    console.log('LINE Channel Access Token not configured')
    return null
  }

  try {
    const response = await fetch(
      `https://api.line.me/v2/bot/profile/${userId}`,
      {
        headers: {
          Authorization: `Bearer ${LINE_CHANNEL_ACCESS_TOKEN}`,
        },
      }
    )

    if (!response.ok) {
      throw new Error(`LINE API error: ${response.status}`)
    }

    return await response.json()
  } catch (error) {
    console.error('Error getting LINE user profile:', error)
    return null
  }
}

// Send reply message
async function sendReplyMessage(replyToken, message) {
  if (!LINE_CHANNEL_ACCESS_TOKEN) {
    console.log('LINE Channel Access Token not configured')
    return
  }

  try {
    const response = await fetch('https://api.line.me/v2/bot/message/reply', {
      method: 'POST',
      headers: {
        Authorization: `Bearer ${LINE_CHANNEL_ACCESS_TOKEN}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        replyToken: replyToken,
        messages: [message],
      }),
    })

    if (!response.ok) {
      throw new Error(`LINE API error: ${response.status}`)
    }

    console.log('‚úÖ Reply message sent successfully')
  } catch (error) {
    console.error('Error sending reply message:', error)
  }
}
