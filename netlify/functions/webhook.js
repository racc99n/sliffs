/**
 * LINE Bot Messaging API Webhook
 * Handles incoming messages from LINE users
 */

const crypto = require('crypto')
const { Pool } = require('pg')

// Environment variables
const LINE_CHANNEL_SECRET = process.env.LINE_CHANNEL_SECRET
const LINE_CHANNEL_ACCESS_TOKEN = process.env.LINE_CHANNEL_ACCESS_TOKEN
const NETLIFY_URL = process.env.NETLIFY_URL || 'https://sliffs.netlify.app'

// Database connection
let pool = null

function initializeDatabase() {
  if (pool) return pool

  try {
    const databaseUrl =
      process.env.NETLIFY_DATABASE_URL || process.env.DATABASE_URL

    if (databaseUrl) {
      pool = new Pool({
        connectionString: databaseUrl,
        ssl: databaseUrl.includes('localhost')
          ? false
          : { rejectUnauthorized: false },
        max: 3,
        min: 1,
        idleTimeoutMillis: 30000,
      })
      console.log('‚úÖ Database pool initialized for LINE Bot')
    } else {
      console.warn('‚ö†Ô∏è Database not configured - running in demo mode')
    }

    return pool
  } catch (error) {
    console.error('‚ùå Database initialization failed:', error)
    return null
  }
}

// Verify LINE signature
function verifyLineSignature(body, signature) {
  if (!LINE_CHANNEL_SECRET || !signature) {
    console.warn('‚ö†Ô∏è LINE signature verification skipped (missing credentials)')
    return true // Allow in demo mode
  }

  try {
    const hash = crypto
      .createHmac('sha256', LINE_CHANNEL_SECRET)
      .update(body)
      .digest('base64')

    return hash === signature
  } catch (error) {
    console.error('‚ùå Signature verification error:', error)
    return false
  }
}

// Database functions
async function executeQuery(query, params = []) {
  const client = initializeDatabase()
  if (!client) return null

  try {
    const result = await client.query(query, params)
    return result
  } catch (error) {
    console.error('‚ùå Database query error:', error)
    return null
  }
}

async function upsertLineUser(userData) {
  try {
    const query = `
            INSERT INTO line_users (
                line_user_id, display_name, picture_url, 
                status_message, language, created_at, updated_at
            ) VALUES ($1, $2, $3, $4, $5, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
            ON CONFLICT (line_user_id) 
            DO UPDATE SET
                display_name = EXCLUDED.display_name,
                picture_url = EXCLUDED.picture_url,
                status_message = EXCLUDED.status_message,
                updated_at = CURRENT_TIMESTAMP
            RETURNING id, line_user_id, is_linked;
        `

    const params = [
      userData.userId,
      userData.displayName || null,
      userData.pictureUrl || null,
      userData.statusMessage || null,
      userData.language || 'th',
    ]

    const result = await executeQuery(query, params)
    return result?.rows[0]
  } catch (error) {
    console.error('‚ùå Error upserting LINE user:', error)
    return null
  }
}

async function checkUserLinking(lineUserId) {
  try {
    const query = `
            SELECT 
                lu.id,
                lu.line_user_id,
                lu.display_name,
                lu.is_linked,
                al.prima789_username,
                pa.username,
                pa.available,
                pa.first_name,
                pa.last_name
            FROM line_users lu
            LEFT JOIN account_links al ON lu.line_user_id = al.line_user_id
            LEFT JOIN prima789_accounts pa ON al.prima789_username = pa.username
            WHERE lu.line_user_id = $1;
        `

    const result = await executeQuery(query, [lineUserId])
    return result?.rows[0]
  } catch (error) {
    console.error('‚ùå Error checking user linking:', error)
    return null
  }
}

async function getUserTransactions(lineUserId, limit = 5) {
  try {
    const query = `
            SELECT 
                t.transaction_type,
                t.amount,
                t.balance_before,
                t.balance_after,
                t.created_at,
                t.details
            FROM transactions t
            JOIN account_links al ON t.username = al.prima789_username
            WHERE al.line_user_id = $1
            ORDER BY t.created_at DESC
            LIMIT $2;
        `

    const result = await executeQuery(query, [lineUserId, limit])
    return result?.rows || []
  } catch (error) {
    console.error('‚ùå Error getting user transactions:', error)
    return []
  }
}

// LINE API functions
async function getLineUserProfile(userId) {
  if (!LINE_CHANNEL_ACCESS_TOKEN) {
    console.warn('‚ö†Ô∏è LINE Channel Access Token not configured')
    return null
  }

  try {
    const response = await fetch(
      `https://api.line.me/v2/bot/profile/${userId}`,
      {
        headers: {
          Authorization: `Bearer ${LINE_CHANNEL_ACCESS_TOKEN}`,
        },
      }
    )

    if (!response.ok) {
      throw new Error(`LINE API error: ${response.status}`)
    }

    return await response.json()
  } catch (error) {
    console.error('‚ùå Error getting LINE user profile:', error)
    return null
  }
}

async function sendReplyMessage(replyToken, messages) {
  if (!LINE_CHANNEL_ACCESS_TOKEN) {
    console.warn(
      '‚ö†Ô∏è LINE Channel Access Token not configured - cannot send reply'
    )
    return false
  }

  try {
    const response = await fetch('https://api.line.me/v2/bot/message/reply', {
      method: 'POST',
      headers: {
        Authorization: `Bearer ${LINE_CHANNEL_ACCESS_TOKEN}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        replyToken: replyToken,
        messages: Array.isArray(messages) ? messages : [messages],
      }),
    })

    if (!response.ok) {
      const error = await response.text()
      throw new Error(`LINE API error: ${response.status} - ${error}`)
    }

    console.log('‚úÖ Reply message sent successfully')
    return true
  } catch (error) {
    console.error('‚ùå Error sending reply message:', error)
    return false
  }
}

// Message handlers
async function handleTextMessage(event) {
  const userId = event.source.userId
  const message = event.message.text.trim()

  console.log(`üí¨ Text message from ${userId}: ${message}`)

  // Get user profile and update database
  const profile = await getLineUserProfile(userId)
  if (profile) {
    await upsertLineUser(profile)
  }

  // Check account linking status
  const linkStatus = await checkUserLinking(userId)

  // Handle different commands
  if (
    message.toLowerCase().includes('‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ') ||
    message.toLowerCase().includes('hello')
  ) {
    await sendWelcomeMessage(event.replyToken, linkStatus)
  } else if (
    message.toLowerCase().includes('‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô') ||
    message.toLowerCase().includes('balance')
  ) {
    await sendBalanceMessage(event.replyToken, linkStatus)
  } else if (
    message.toLowerCase().includes('‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥') ||
    message.toLowerCase().includes('history')
  ) {
    await sendTransactionHistory(event.replyToken, userId)
  } else if (
    message.toLowerCase().includes('‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠') ||
    message.toLowerCase().includes('help')
  ) {
    await sendHelpMessage(event.replyToken)
  } else if (
    message.toLowerCase().includes('‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠') ||
    message.toLowerCase().includes('link')
  ) {
    await sendLinkingMessage(event.replyToken)
  } else {
    await sendDefaultMessage(event.replyToken, linkStatus)
  }
}

async function handlePostbackEvent(event) {
  const userId = event.source.userId
  const data = event.postback.data

  console.log(`üîó Postback from ${userId}: ${data}`)

  if (data === 'action=help') {
    await sendHelpMessage(event.replyToken)
  } else if (data === 'action=link_account') {
    await sendLinkingMessage(event.replyToken)
  } else if (data === 'action=balance') {
    const linkStatus = await checkUserLinking(userId)
    await sendBalanceMessage(event.replyToken, linkStatus)
  } else if (data === 'action=history') {
    await sendTransactionHistory(event.replyToken, userId)
  }
}

// Message generators
async function sendWelcomeMessage(replyToken, linkStatus) {
  const isLinked = linkStatus && linkStatus.is_linked
  const userName = linkStatus?.display_name || '‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å'

  const message = {
    type: 'flex',
    altText: '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà Prima789!',
    contents: {
      type: 'bubble',
      header: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'text',
            text: 'üé∞ Prima789',
            weight: 'bold',
            size: 'xl',
            color: '#ffffff',
          },
          {
            type: 'text',
            text: `‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö ${userName}!`,
            size: 'sm',
            color: '#ffffff',
            margin: 'sm',
          },
        ],
        backgroundColor: '#667eea',
        paddingAll: '20px',
      },
      body: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'text',
            text: isLinked
              ? '‚úÖ ‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß'
              : 'üîó ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
            wrap: true,
            color: isLinked ? '#22c55e' : '#f59e0b',
            weight: 'bold',
          },
          {
            type: 'separator',
            margin: 'md',
          },
          {
            type: 'text',
            text: '‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:',
            weight: 'bold',
            margin: 'md',
          },
          {
            type: 'text',
            text: '‚Ä¢ "‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô" - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô\n‚Ä¢ "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥" - ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n‚Ä¢ "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠" - ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ\n‚Ä¢ "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠" - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠',
            size: 'sm',
            color: '#666666',
            wrap: true,
            margin: 'sm',
          },
        ],
      },
      footer: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'button',
            style: 'primary',
            height: 'sm',
            action: {
              type: 'uri',
              label: isLinked ? 'üì± ‡πÄ‡∏õ‡∏¥‡∏î Member Card' : 'üîó ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ',
              uri: isLinked
                ? `${NETLIFY_URL}/liff-member-card.html`
                : `${NETLIFY_URL}/liff-account-linking.html`,
            },
          },
        ],
      },
    },
  }

  await sendReplyMessage(replyToken, message)
}

async function sendBalanceMessage(replyToken, linkStatus) {
  if (!linkStatus || !linkStatus.is_linked) {
    const message = {
      type: 'text',
      text: '‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Prima789\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô',
    }

    await sendReplyMessage(replyToken, message)
    return
  }

  const balance = parseFloat(linkStatus.available) || 0
  const formattedBalance = balance.toLocaleString('th-TH', {
    style: 'currency',
    currency: 'THB',
  })

  const message = {
    type: 'flex',
    altText: `‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: ${formattedBalance}`,
    contents: {
      type: 'bubble',
      header: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'text',
            text: 'üí∞ ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠',
            weight: 'bold',
            size: 'lg',
            color: '#ffffff',
          },
        ],
        backgroundColor: '#22c55e',
        paddingAll: '15px',
      },
      body: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'text',
            text: formattedBalance,
            size: 'xxl',
            weight: 'bold',
            color: '#22c55e',
            align: 'center',
          },
          {
            type: 'separator',
            margin: 'md',
          },
          {
            type: 'box',
            layout: 'horizontal',
            contents: [
              {
                type: 'text',
                text: '‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ:',
                size: 'sm',
                color: '#666666',
                flex: 1,
              },
              {
                type: 'text',
                text:
                  `${linkStatus.first_name || ''} ${
                    linkStatus.last_name || ''
                  }`.trim() || linkStatus.username,
                size: 'sm',
                weight: 'bold',
                flex: 2,
                align: 'end',
              },
            ],
            margin: 'md',
          },
          {
            type: 'box',
            layout: 'horizontal',
            contents: [
              {
                type: 'text',
                text: '‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:',
                size: 'sm',
                color: '#666666',
                flex: 1,
              },
              {
                type: 'text',
                text: new Date().toLocaleDateString('th-TH'),
                size: 'sm',
                flex: 2,
                align: 'end',
              },
            ],
          },
        ],
      },
      footer: {
        type: 'box',
        layout: 'horizontal',
        spacing: 'sm',
        contents: [
          {
            type: 'button',
            style: 'secondary',
            height: 'sm',
            action: {
              type: 'postback',
              label: 'üìä ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥',
              data: 'action=history',
            },
            flex: 1,
          },
          {
            type: 'button',
            style: 'primary',
            height: 'sm',
            action: {
              type: 'uri',
              label: 'üì± Member Card',
              uri: `${NETLIFY_URL}/liff-member-card.html`,
            },
            flex: 2,
          },
        ],
      },
    },
  }

  await sendReplyMessage(replyToken, message)
}

async function sendTransactionHistory(replyToken, userId) {
  const transactions = await getUserTransactions(userId, 5)

  if (transactions.length === 0) {
    const message = {
      type: 'text',
      text: 'üìä ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n\n‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏¥‡πà‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
    }

    await sendReplyMessage(replyToken, message)
    return
  }

  const transactionElements = transactions.map((tx) => ({
    type: 'box',
    layout: 'horizontal',
    contents: [
      {
        type: 'text',
        text: getTransactionIcon(tx.transaction_type),
        flex: 0,
        size: 'lg',
      },
      {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'text',
            text: getTransactionName(tx.transaction_type),
            weight: 'bold',
            size: 'sm',
          },
          {
            type: 'text',
            text: new Date(tx.created_at).toLocaleDateString('th-TH'),
            size: 'xs',
            color: '#666666',
          },
        ],
        flex: 2,
      },
      {
        type: 'text',
        text: tx.amount ? `‚Çø${Math.abs(tx.amount).toLocaleString()}` : '-',
        align: 'end',
        weight: 'bold',
        color: tx.transaction_type === 'deposit' ? '#22c55e' : '#ef4444',
        flex: 1,
      },
    ],
    paddingAll: '8px',
  }))

  const message = {
    type: 'flex',
    altText: '‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£',
    contents: {
      type: 'bubble',
      header: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'text',
            text: 'üìä ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£',
            weight: 'bold',
            size: 'lg',
            color: '#ffffff',
          },
          {
            type: 'text',
            text: `${transactions.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î`,
            size: 'sm',
            color: '#ffffff',
          },
        ],
        backgroundColor: '#667eea',
        paddingAll: '15px',
      },
      body: {
        type: 'box',
        layout: 'vertical',
        contents: transactionElements,
        spacing: 'sm',
      },
    },
  }

  await sendReplyMessage(replyToken, message)
}

async function sendLinkingMessage(replyToken) {
  const message = {
    type: 'flex',
    altText: '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Prima789',
    contents: {
      type: 'bubble',
      header: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'text',
            text: 'üîó ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ',
            weight: 'bold',
            size: 'lg',
            color: '#ffffff',
          },
        ],
        backgroundColor: '#f59e0b',
        paddingAll: '15px',
      },
      body: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'text',
            text: '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Prima789 ‡∏Å‡∏±‡∏ö LINE ‡πÄ‡∏û‡∏∑‡πà‡∏≠:',
            weight: 'bold',
            wrap: true,
          },
          {
            type: 'text',
            text: '‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏ö‡∏ö Real-time\n‚Ä¢ ‡∏£‡∏±‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n‚Ä¢ ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n‚Ä¢ ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡πÑ‡∏î‡πâ‡∏™‡∏∞‡∏î‡∏ß‡∏Å',
            size: 'sm',
            color: '#666666',
            wrap: true,
            margin: 'md',
          },
        ],
      },
      footer: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'button',
            style: 'primary',
            height: 'sm',
            action: {
              type: 'uri',
              label: 'üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏•‡∏¢!',
              uri: `${NETLIFY_URL}/liff-account-linking.html`,
            },
          },
        ],
      },
    },
  }

  await sendReplyMessage(replyToken, message)
}

async function sendHelpMessage(replyToken) {
  const message = {
    type: 'flex',
    altText: '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠ Prima789 Bot',
    contents: {
      type: 'bubble',
      header: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'text',
            text: '‚ùì ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠',
            weight: 'bold',
            size: 'lg',
            color: '#ffffff',
          },
        ],
        backgroundColor: '#6366f1',
        paddingAll: '15px',
      },
      body: {
        type: 'box',
        layout: 'vertical',
        contents: [
          {
            type: 'text',
            text: 'üìù ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ:',
            weight: 'bold',
            size: 'md',
          },
          {
            type: 'text',
            text: '‚Ä¢ ‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô" ‡∏´‡∏£‡∏∑‡∏≠ "balance"\n‚Ä¢ ‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥" ‡∏´‡∏£‡∏∑‡∏≠ "history"\n‚Ä¢ ‡∏û‡∏¥‡∏°‡∏û‡πå "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠" ‡∏´‡∏£‡∏∑‡∏≠ "link"\n‚Ä¢ ‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ" ‡∏´‡∏£‡∏∑‡∏≠ "hello"',
            size: 'sm',
            wrap: true,
            margin: 'md',
          },
          {
            type: 'separator',
            margin: 'md',
          },
          {
            type: 'text',
            text: 'üîß ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å:',
            weight: 'bold',
            size: 'md',
            margin: 'md',
          },
          {
            type: 'text',
            text: '‚Ä¢ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ Prima789\n‚Ä¢ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏ö‡∏ö Real-time\n‚Ä¢ ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n‚Ä¢ ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥',
            size: 'sm',
            wrap: true,
            margin: 'sm',
          },
        ],
      },
      footer: {
        type: 'box',
        layout: 'horizontal',
        spacing: 'sm',
        contents: [
          {
            type: 'button',
            style: 'secondary',
            height: 'sm',
            action: {
              type: 'postback',
              label: 'üîó ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠',
              data: 'action=link_account',
            },
            flex: 1,
          },
          {
            type: 'button',
            style: 'primary',
            height: 'sm',
            action: {
              type: 'postback',
              label: 'üí∞ ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô',
              data: 'action=balance',
            },
            flex: 1,
          },
        ],
      },
    },
  }

  await sendReplyMessage(replyToken, message)
}

async function sendDefaultMessage(replyToken, linkStatus) {
  const isLinked = linkStatus && linkStatus.is_linked

  const message = {
    type: 'text',
    text: `ü§ñ ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ‡∏Ñ‡∏£‡∏±‡∏ö! ‡∏ú‡∏°‡πÄ‡∏õ‡πá‡∏ô Prima789 Bot\n\n${
      isLinked ? '‚úÖ' : 'üîó'
    } ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${
      isLinked ? '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß' : '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠'
    }\n\n‡∏•‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ:\n‚Ä¢ "‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô" - ‡∏î‡∏π‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô\n‚Ä¢ "‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥" - ‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥\n‚Ä¢ "‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠" - ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ\n‚Ä¢ "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠" - ‡∏î‡∏π‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠`,
  }

  await sendReplyMessage(replyToken, message)
}

// Utility functions
function getTransactionIcon(type) {
  const icons = {
    deposit: 'üí∞',
    withdrawal: 'üí∏',
    bet: 'üé≤',
    win: 'üèÜ',
    bonus: 'üéÅ',
    data_sync: 'üîÑ',
    user_login: 'üîê',
    heartbeat: 'üíì',
  }
  return icons[type] || 'üìÑ'
}

function getTransactionName(type) {
  const names = {
    deposit: '‡∏ù‡∏≤‡∏Å‡πÄ‡∏á‡∏¥‡∏ô',
    withdrawal: '‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô',
    bet: '‡∏ß‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô',
    win: '‡∏ä‡∏ô‡∏∞‡πÄ‡∏î‡∏¥‡∏°‡∏û‡∏±‡∏ô',
    bonus: '‡πÇ‡∏ö‡∏ô‡∏±‡∏™',
    data_sync: '‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
    user_login: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö',
    heartbeat: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö',
  }
  return names[type] || type
}

// Main webhook handler
exports.handler = async (event, context) => {
  console.log('ü§ñ LINE Bot Webhook - Start')
  console.log('üìä Request info:', {
    method: event.httpMethod,
    headers: event.headers ? Object.keys(event.headers) : 'none',
    bodyLength: event.body ? event.body.length : 0,
  })

  // CORS headers
  const headers = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers':
      'Content-Type, Authorization, X-Line-Signature',
    'Access-Control-Allow-Methods': 'POST, OPTIONS, GET',
    'Content-Type': 'application/json',
  }

  // Handle preflight requests
  if (event.httpMethod === 'OPTIONS') {
    return {
      statusCode: 200,
      headers,
      body: JSON.stringify({ message: 'CORS OK' }),
    }
  }

  // Health check
  if (event.httpMethod === 'GET') {
    return {
      statusCode: 200,
      headers,
      body: JSON.stringify({
        success: true,
        status: 'LINE Bot Webhook is running',
        timestamp: new Date().toISOString(),
        config: {
          line_configured: !!LINE_CHANNEL_ACCESS_TOKEN,
          database_configured: !!process.env.NETLIFY_DATABASE_URL,
          netlify_url: NETLIFY_URL,
        },
      }),
    }
  }

  // Only allow POST for webhook events
  if (event.httpMethod !== 'POST') {
    return {
      statusCode: 405,
      headers,
      body: JSON.stringify({
        success: false,
        error: 'Method not allowed',
      }),
    }
  }

  try {
    // Verify LINE signature
    const signature =
      event.headers['x-line-signature'] || event.headers['X-Line-Signature']
    const body = event.body

    if (!verifyLineSignature(body, signature)) {
      console.error('‚ùå Invalid LINE signature')
      return {
        statusCode: 401,
        headers,
        body: JSON.stringify({
          success: false,
          error: 'Invalid signature',
        }),
      }
    }

    // Parse webhook events
    let webhookData
    try {
      webhookData = JSON.parse(body)
    } catch (parseError) {
      console.error('‚ùå JSON parse error:', parseError)
      return {
        statusCode: 400,
        headers,
        body: JSON.stringify({
          success: false,
          error: 'Invalid JSON',
        }),
      }
    }

    console.log('üì® Webhook data:', JSON.stringify(webhookData, null, 2))

    // Initialize database
    initializeDatabase()

    // Process each event
    const events = webhookData.events || []
    console.log(`üì¨ Processing ${events.length} events`)

    for (const event of events) {
      console.log(`üéØ Event type: ${event.type}`)

      try {
        switch (event.type) {
          case 'message':
            if (event.message.type === 'text') {
              await handleTextMessage(event)
            }
            break

          case 'postback':
            await handlePostbackEvent(event)
            break

          case 'follow':
            console.log('üëã New follower:', event.source.userId)
            const profile = await getLineUserProfile(event.source.userId)
            if (profile) {
              await upsertLineUser(profile)
            }
            await sendWelcomeMessage(event.replyToken, null)
            break

          case 'unfollow':
            console.log('üëã User unfollowed:', event.source.userId)
            break

          default:
            console.log(`‚ÑπÔ∏è Unhandled event type: ${event.type}`)
        }
      } catch (eventError) {
        console.error(`‚ùå Error processing event ${event.type}:`, eventError)
      }
    }

    console.log('‚úÖ LINE Bot Webhook completed successfully')

    return {
      statusCode: 200,
      headers,
      body: JSON.stringify({
        success: true,
        message: 'Events processed successfully',
        processed_events: events.length,
        timestamp: new Date().toISOString(),
      }),
    }
  } catch (error) {
    console.error('‚ùå LINE Bot Webhook error:', error)
    console.error('Stack trace:', error.stack)

    return {
      statusCode: 500,
      headers,
      body: JSON.stringify({
        success: false,
        error: 'Internal server error',
        timestamp: new Date().toISOString(),
      }),
    }
  }
}
