const { Pool } = require('pg')

exports.handler = async (event, context) => {
  console.log('üîß Fixing Database Schema...')

  const pool = new Pool({
    connectionString: process.env.NETLIFY_DATABASE_URL,
    ssl: { rejectUnauthorized: false },
  })

  try {
    const client = await pool.connect()

    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö schema ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    console.log('üìä Checking current schema...')
    const columnsResult = await client.query(`
            SELECT column_name, data_type, is_nullable, column_default
            FROM information_schema.columns 
            WHERE table_name = 'line_accounts' 
            ORDER BY ordinal_position
        `)

    const existingColumns = columnsResult.rows.map((row) => row.column_name)
    console.log('üìã Existing columns:', existingColumns)

    // 2. ‡πÄ‡∏û‡∏¥‡πà‡∏° columns ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢
    const requiredColumns = [
      { name: 'username', type: 'VARCHAR(100)' },
      { name: 'display_name', type: 'VARCHAR(100)' },
      { name: 'phone_number', type: 'VARCHAR(20)' },
      { name: 'email', type: 'VARCHAR(100)' },
      { name: 'balance', type: 'DECIMAL(15,2) DEFAULT 0.00' },
      { name: 'points', type: 'INTEGER DEFAULT 0' },
      { name: 'tier', type: "VARCHAR(20) DEFAULT 'Bronze'" },
      { name: 'status', type: "VARCHAR(20) DEFAULT 'active'" },
      { name: 'link_method', type: "VARCHAR(20) DEFAULT 'auto'" },
      { name: 'linked_at', type: 'TIMESTAMP DEFAULT CURRENT_TIMESTAMP' },
      { name: 'last_sync_at', type: 'TIMESTAMP DEFAULT CURRENT_TIMESTAMP' },
      { name: 'last_active_at', type: 'TIMESTAMP DEFAULT CURRENT_TIMESTAMP' },
      { name: 'updated_at', type: 'TIMESTAMP DEFAULT CURRENT_TIMESTAMP' },
    ]

    const addedColumns = []

    for (const column of requiredColumns) {
      if (!existingColumns.includes(column.name)) {
        try {
          console.log(`‚ûï Adding column: ${column.name}`)
          await client.query(`
                        ALTER TABLE line_accounts 
                        ADD COLUMN IF NOT EXISTS ${column.name} ${column.type}
                    `)
          addedColumns.push(column.name)
        } catch (error) {
          console.error(`‚ùå Error adding column ${column.name}:`, error.message)
        }
      }
    }

    // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö schema ‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    const updatedColumnsResult = await client.query(`
            SELECT column_name, data_type, is_nullable, column_default
            FROM information_schema.columns 
            WHERE table_name = 'line_accounts' 
            ORDER BY ordinal_position
        `)

    // 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á indexes ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    console.log('üìä Creating indexes...')
    const indexes = [
      'CREATE INDEX IF NOT EXISTS idx_line_accounts_username ON line_accounts(username)',
      'CREATE INDEX IF NOT EXISTS idx_line_accounts_status ON line_accounts(status)',
      'CREATE INDEX IF NOT EXISTS idx_line_accounts_tier ON line_accounts(tier)',
    ]

    for (const indexQuery of indexes) {
      try {
        await client.query(indexQuery)
      } catch (error) {
        console.error('Index creation error:', error.message)
      }
    }

    // 5. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö (‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ)
    console.log('üìù Adding test data...')
    try {
      await client.query(`
                INSERT INTO line_accounts (
                    line_user_id, prima789_user_id, username, display_name, 
                    balance, points, tier, status
                ) VALUES (
                    'test-user', 'test_12345', 'testuser', 'Test User', 
                    5000.00, 1250, 'Silver', 'active'
                ) ON CONFLICT (line_user_id) DO UPDATE SET
                    username = EXCLUDED.username,
                    display_name = EXCLUDED.display_name,
                    balance = EXCLUDED.balance,
                    points = EXCLUDED.points,
                    tier = EXCLUDED.tier,
                    updated_at = CURRENT_TIMESTAMP
            `)
    } catch (error) {
      console.error('Test data insertion error:', error.message)
    }

    // 6. ‡∏™‡∏£‡πâ‡∏≤‡∏á transaction_logs table ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    console.log('üìä Creating transaction_logs table...')
    try {
      await client.query(`
                CREATE TABLE IF NOT EXISTS transaction_logs (
                    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    transaction_type VARCHAR(50) NOT NULL,
                    transaction_id VARCHAR(255),
                    prima789_user_id VARCHAR(255) NOT NULL,
                    prima789_username VARCHAR(255) NOT NULL,
                    amount DECIMAL(15,2) NOT NULL DEFAULT 0,
                    balance_before DECIMAL(15,2) DEFAULT 0,
                    balance_after DECIMAL(15,2) DEFAULT 0,
                    notification_sent BOOLEAN DEFAULT FALSE,
                    notification_sent_at TIMESTAMP,
                    details JSONB,
                    timestamp TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            `)

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏î‡∏™‡∏≠‡∏ö
      await client.query(`
                INSERT INTO transaction_logs (
                    transaction_type, prima789_user_id, prima789_username, 
                    amount, balance_before, balance_after, details
                ) VALUES (
                    'deposit', 'test_12345', 'testuser', 1000.00, 4000.00, 5000.00, 
                    '{"method": "bank_transfer", "bank": "SCB"}'::jsonb
                ) ON CONFLICT DO NOTHING
            `)
    } catch (error) {
      console.error('Transaction logs table error:', error.message)
    }

    // 7. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    const testDataResult = await client.query(`
            SELECT line_user_id, prima789_user_id, username, display_name, 
                   balance, points, tier, status, created_at
            FROM line_accounts 
            WHERE line_user_id = 'test-user'
        `)

    client.release()
    await pool.end()

    return {
      statusCode: 200,
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        success: true,
        message: 'Database schema fixed successfully',
        details: {
          existing_columns: existingColumns,
          added_columns: addedColumns,
          updated_columns: updatedColumnsResult.rows.map((row) => ({
            name: row.column_name,
            type: row.data_type,
            nullable: row.is_nullable,
            default: row.column_default,
          })),
          test_data: testDataResult.rows[0] || null,
        },
      }),
    }
  } catch (error) {
    console.error('‚ùå Database schema fix error:', error)
    return {
      statusCode: 500,
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        success: false,
        error: error.message,
        details: {
          code: error.code,
          detail: error.detail,
          hint: error.hint,
        },
      }),
    }
  }
}
